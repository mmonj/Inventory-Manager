services:
  django_app:
    build:
      context: .
      args:
        DEV: "${DEV}"
        UID: "${UID}"
    image: inventory-manager-dev
    container_name: inventory-manager-dev
    command: >
      bash -c "
      trap 'echo SIGTERM received, shutting down...; exit' SIGTERM;
      while true; do
        sleep 1;
      done
      "
    tty: true
    user: "${UID}"
    ports:
      - 8001:8000
    volumes:
      - /app/node_modules
      - ./:/app
    env_file:
      - .env.dev
    restart: unless-stopped

  # redis-overcommit-on-host
  redis-overcommit:
    build: https://github.com/bkuhl/redis-overcommit-on-host.git
    container_name: redis-overcommit-dev
    restart: "no"
    privileged: true
    volumes:
      - /proc/sys/vm:/mnt/vm

  redis:
    image: redis
    container_name: redis-inventory-manager-dev
    restart: unless-stopped
    depends_on:
      - django_app

  rq_worker_default:
    image: inventory-manager-django-dev
    container_name: inventory-manager-rq-worker-default-dev
    command: poetry run python manage.py rqworker default
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.dev
    restart: unless-stopped
    depends_on:
      - django_app

  rq_worker_onehub_synccer:
    image: inventory-manager-django-dev
    container_name: inventory-manager-rq-worker-onehub-synccer-dev
    command: poetry run python manage.py rqworker onehub_synccer
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.dev
    restart: unless-stopped
    depends_on:
      - django_app

  rq_scheduler:
    image: inventory-manager-django-dev
    container_name: inventory-manager-rq-scheduler-dev
    command: poetry run rqscheduler -H redis -p 6379 --db 0
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.dev
    restart: unless-stopped
    depends_on:
      - django_app
