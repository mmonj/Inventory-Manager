services:
  django_app:
    build:
      context: .
      args:
        ENV_TYPE: prod
        UID: 1000
    image: mmonj.inventory_manager_django
    container_name: inventory_manager
    command: >
      uv run bash -c "python manage.py migrate
      && python manage.py generate_client_assets
      && python manage.py build
      && python manage.py collectstatic --clear --noinput
      && uvicorn server.asgi:application --host 0.0.0.0 --port 8080"
    user: "${UID}"
    volumes:
      - inv-mngr-node_modules:/app/node_modules
      - inv-mngr-venv:/app/.venv
      - ./:/app
    env_file:
      - .env.prod
    restart: always
    networks:
      - caddy_net

  # redis-overcommit-on-host
  redis-overcommit:
    build: https://github.com/bkuhl/redis-overcommit-on-host.git
    restart: "no"
    privileged: true
    volumes:
      - /proc/sys/vm:/mnt/vm

  redis:
    image: redis
    container_name: redis-inventory-manager
    command: bash -c "redis-server --port $$REDIS_PORT --requirepass $$REDIS_PASSWORD"
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app

  rq_worker_default:
    image: mmonj.inventory_manager_django
    container_name: inventory-manager-rq-worker-default
    command: poetry run python manage.py rqworker default
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app
      - redis

  scheduler_worker_default:
    image: mmonj.inventory_manager_django
    container_name: inventory-manager-scheduler-worker-default
    command: uv run python manage.py scheduler_worker
    user: "${UID}"
    volumes:
      - inv-mngr-venv:/app/.venv
      - ./:/app
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app
      - redis

networks:
  caddy_net:
    external: true

volumes:
  inv-mngr-node_modules:
  inv-mngr-venv:
