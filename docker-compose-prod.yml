services:
  django_app:
    build:
      context: .
      args:
        DEV: "${DEV}"
        UID: "${UID}"
    image: mmonj.inventory-manager-django-prod
    container_name: inventory-manager-prod
    command: >
      poetry run bash -c "python manage.py migrate
      && python manage.py generate_client_assets
      && python manage.py build
      && python manage.py collectstatic --clear --noinput
      && uvicorn server.asgi:application --host 0.0.0.0 --port 8080"
    user: "${UID}"
    volumes:
      - /app/node_modules
      - ./:/app
    env_file:
      - .env.prod
    restart: always
    networks:
      - caddy_net

  # redis-overcommit-on-host
  redis-overcommit:
    build: https://github.com/bkuhl/redis-overcommit-on-host.git
    container_name: redis-overcommit-prod
    restart: "no"
    privileged: true
    volumes:
      - /proc/sys/vm:/mnt/vm

  redis:
    image: redis
    container_name: redis-inventory-manager-prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app

  rq_worker_default:
    image: mmonj.inventory-manager-django-prod
    container_name: inventory-manager-rq-worker-default-prod
    command: poetry run python manage.py rqworker default
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app
      - redis

  rq_worker_onehub_synccer:
    image: mmonj.inventory-manager-django-prod
    container_name: inventory-manager-rq-worker-onehub-synccer-prod
    command: poetry run python manage.py rqworker onehub_synccer
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app
      - redis

  rq_scheduler:
    image: mmonj.inventory-manager-django-prod
    container_name: inventory-manager-rq-scheduler-prod
    command: poetry run rqscheduler -H redis -p 6379 --db 0
    user: "${UID}"
    volumes:
      - ./:/app
    env_file:
      - .env.prod
    restart: unless-stopped
    networks:
      - caddy_net
    depends_on:
      - django_app
      - redis

networks:
  caddy_net:
    external: true
